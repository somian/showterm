#!/bin/bash
# A simple Linux-only pure-shell showterm client for those without Ruby.
#
# Mac users (and Linux users with Ruby installed) should use the ruby client:
#   (sudo) gem install showterm
#
# Dependencies (please let me know if you don't have them all already)
#   mktemp (coreutils)
#   script (util-linux)
#   tput   (ncurses)
#   bash
#   curl
#
# To install. Just copy this file to your computer, and chmod +x showterm.
#
#   curl showterm.io/showterm > ~/bin/showterm
#   chmod +x ~/bin/showterm
#
# Otherwise you can run this file without installing:
#
#   bash <(curl record.showterm.io)
#
set -e
export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
export  XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}

test -d "$XDG_CACHE_HOME/showterm-tmp" || mkdir -p "$XDG_CACHE_HOME/showterm-tmp"

record_base_url="showterm.io/record"
upload_base_url="showterm.io"

shtsession="$(xdg-user-dir PUBLICSHARE)/showterm-sessionrecord"
test -d "$shtsession" || mkdir -p "$shtsession"
if ! test -d $shtsession; then
    printf 'Failure: no directory to write data to be uploaded: %s\n' "${shtsession:-NULLSTRING}"
    exit 1
fi

if ! tty >/dev/null
then
    echo "Usage: bash <(curl $record_base_url)"
    exit 1
fi

if [ "-d" = "$1" -o "--delete" = "$1" ]
then
    url="${2?-Usage showterm --delete <url>}"
    curl --fail "$url" -X "DELETE" --data-urlencode "secret@$shtsession/showterm"
    exit
fi

scriptfile="$(mktemp $XDG_CACHE_HOME/showterm-tmp/XXXXX.script)"
timingfile="$(mktemp $XDG_CACHE_HOME/showterm-tmp/XXXXX.timing)"

cols="$(tput cols)"
lines="$(tput lines)"

#--- COLORS ---
fgOST=$(tput setf 6)
fgWER=$(tput setf 4)

SHOWTERM_SERVER="http://showterm.io"
server="${SHOWTERM_SERVER-$upload_base_url}"
url="${server%/}/scripts"

if [ "$*" ]
then
    echo "$*"
    args=-c "$*"
fi

if [ ! -f "$shtsession/showterm" ]
then
    echo -n $(openssl rand -hex 16) > "$shtsession/showterm"
fi

echo "showterm recording. (Exit shell CTRL-D when done.)"
script $args -q -t"$timingfile" "$scriptfile"

cURLo="--show-error --silent --ipv4"
printf '%sUploading to server %s ...\033[0m:\033[2K\r' "$fgOST" "$server" && sleep 1
curl $cURLo "$url" --data-urlencode "cols=$cols" --data-urlencode "lines=$lines" --data-urlencode "scriptfile@$scriptfile" --data-urlencode "timingfile@$timingfile" "secret@$shtsession/showterm" \
 2>/tmp/curl-error.log && printf '\r\n'

# Store the return error code from curl
cURL_ERR=$?

# We are relying on curl. This is an external program. It may develop bugs. One such
# bug incited this rewrite. So inform the user that the upload succeeded, when it does,
# to enhance confidence and convey information to compare to failure modes that the
# user (like, uhh, me) may have seen from older _showterm_ revisions.
if [ $cURL_ERR -eq 0 ]
then
    printf '\n%sTried and succeeded to upload to server %s\n' "$fgOST" "$server"
    rm "$scriptfile" "$timingfile"
    printf '\n'  #  print a blank line. Prefer printf over echo.
    exit 0
elif [ $cURL_ERR -eq 6 ]
then
    printf '\n%sUploading probably succeeded, but ec 6 (a spurious false error) was returned ...in any case your work is safe.' "$fgWER"
    printf '\nIf no URL was shown, try uploading manually using:\n'
    echo curl $cURLo "$url" --data-urlencode "cols=$cols" --data-urlencode "lines=$lines" --data-urlencode "scriptfile@$scriptfile" --data-urlencode "timingfile@$timingfile" "secret@$shtsession/showterm"
else
    printf '\n%sUploading probably failed, error code %s ...but do not worry! Your work is safe.\n' "$fgWER" "$cURL_ERR"
    printf '%sYou can try uploading again with: ' "$fgOST"
    echo curl $cURLo "$url" --data-urlencode "cols=$cols" --data-urlencode "lines=$lines" --data-urlencode "scriptfile@$scriptfile" --data-urlencode "timingfile@$timingfile" "secret@$shtsession/showterm"
fi
# E O Code
